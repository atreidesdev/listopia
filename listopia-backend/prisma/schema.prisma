datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Standard
  Admin
  Editor
  Developer
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CommentType {
  GAME
  BOOK
  MOVIE
  POST
  NEWS
}

enum ContentType {
  BOOK
  MOVIE
  GAME
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ContentStatus {
  PLANNED
  WATCHED
  WATHCING
  REWATCHING
  POSTPONED
  DROPPED
}

enum MovieType {
  LIVE_ACTION
  ANIME
  ANIMATION
}

enum PersonCareer {
  ACTOR
  DIRECTOR
  AUTHOR
}

enum RoleType {
  LEAD
  SUPPORTING
  CAMEO
  EXTRA
  UNKNOWN
}

enum ChatParticipantRole {
  Standard
  Admin
}

enum JournalType {
  POST
  NEWS
}

enum AgeRating {
  G // подходит для всех возрастов
  PG // некоторый материал может быть не подходящим для детей
  PG_13 // некоторый материал может быть неуместным для детей младше 13 лет
  R // для лиц младше 17 лет требуется сопровождение родителей или взрослого опекуна
  NC_17 // лица младше 17 лет не допускаются
  NR // информация о рейтинге недоступна или не применима
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLogin    DateTime @default(now())
  lastActivity DateTime @default(now())
  active       Boolean  @default(true)

  email        String   @unique
  passwordHash String
  avatarPath   String?
  username     String   @unique
  profileName  String
  role         UserRole @default(Standard)

  friends          User[]             @relation("Friendship")
  friendOf         User[]             @relation("Friendship")
  sentMessages     Message[]          @relation("SentMessages")
  receivedMessages Message[]          @relation("ReceivedMessages")
  friendRequests   FriendRequest[]    @relation("FriendRequests")
  receivedRequests FriendRequest[]    @relation("ReceivedRequests")
  ListItem         ListItem[]
  CustomListItem   CustomListItem[]
  CustomCollection CustomCollection[]
  RefreshTokens    RefreshToken[]
  comments         Comment[]
  Post             Post[]
  News             News[]
  ownedChats       Chat[]             @relation("OwnerChats")
  participantChats ChatParticipant[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  active    Boolean  @default(true)

  token String @unique

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  status String @default("PENDING")

  sender     User @relation("FriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  content   String
  parent    Message? @relation("MessageReplies", fields: [messageId], references: [id])
  messageId Int?

  sender     User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User?     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int?
  chatId     Int?
  chat       Chat?     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replies    Message[] @relation("MessageReplies")
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title       String @default("Chat")
  description String @default("")
  posterPath  String @default("")

  owner        User              @relation("OwnerChats", fields: [ownerId], references: [id])
  ownerId      Int
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  label String              @default("")
  role  ChatParticipantRole

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([chatId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  text        String
  CommentType CommentType

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  book      Book?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "Comment_Book_fkey")
  movie     Movie?    @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "Comment_Movie_fkey")
  game      Game?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "Comment_Game_fkey")
  post      Post?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "Comment_Post_fkey")
  news      News?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "Comment_News_fkey")
  contentId Int
  replies   Comment[] @relation("CommentReplies")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
}

model Rating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  rating Int // 1-100
  review String @default("")

  ListItem ListItem[]
}

model Franchise {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String?
  logoPath    String?

  FranchiseItem FranchiseItem[]
}

model Genre {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String        @unique
  description String?
  genreType   ContentType[]

  books  Book[]
  movies Movie[]
  games  Game[]
}

model Theme {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String  @unique
  description String?

  books  Book[]
  movies Movie[]
  games  Game[]
}

model Person {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  photoPath   String?
  description String?
  birthday    DateTime?
  country     String?
  career      PersonCareer[] // Список карьер (актера, режиссера, писателя и т.д.)
  directed    Movie[]        @relation("DirectedMovies")
  books       Book[]         @relation("PersonBooks")
  casts       Cast[]
}

model Character {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String?
  photoPath   String?

  Cast Cast[]
}

model Cast {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  roleName      String? // для заглушек
  roleActor     String? // для заглушек
  rolePhotoPath String?
  roleType      RoleType    @default(UNKNOWN)
  contentType   ContentType

  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int?
  movie       Movie?     @relation(fields: [contentId], references: [id], map: "Cast_Movie_fkey")
  book        Book?      @relation(fields: [contentId], references: [id], map: "Cast_Book_fkey")
  game        Game?      @relation(fields: [contentId], references: [id], map: "Cast_Game_fkey")
  contentId   Int
  actor       Person?    @relation(fields: [personId], references: [id])
  personId    Int?
}

model SimilarItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  contentType ContentType

  sourceBook      Book?  @relation("SimilarBooksSource", fields: [sourceContentId], references: [id], onDelete: Cascade, map: "SimilarItem_SourceBook_fkey")
  targetBook      Book?  @relation("SimilarBooksTarget", fields: [targetContentId], references: [id], onDelete: Cascade, map: "SimilarItem_TargetBook_fkey")
  sourceMovie     Movie? @relation("SimilarMoviesSource", fields: [sourceContentId], references: [id], onDelete: Cascade, map: "SimilarItem_SourceMovie_fkey")
  targetMovie     Movie? @relation("SimilarMoviesTarget", fields: [targetContentId], references: [id], onDelete: Cascade, map: "SimilarItem_TargetMovie_fkey")
  sourceGame      Game?  @relation("SimilarGamesSource", fields: [sourceContentId], references: [id], onDelete: Cascade, map: "SimilarItem_SourceGame_fkey")
  targetGame      Game?  @relation("SimilarGamesTarget", fields: [targetContentId], references: [id], onDelete: Cascade, map: "SimilarItem_TargetGame_fkey")
  sourceContentId Int
  targetContentId Int
}

model Book {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visitCount Int      @default(0)

  title       String
  description String?
  authors     Person[]        @relation("PersonBooks")
  release     DateTime
  posterPath  String?
  pageCount   Int
  ageRating   AgeRating       @default(NR)
  genres      Genre[]
  themes      Theme[]
  franchises  FranchiseItem[]
  Cast        Cast[]

  ListItem       ListItem[]
  CustomListItem CustomListItem[]
  comments       Comment[]
  similarItems   SimilarItem[]    @relation("SimilarBooksSource")
  similarToItems SimilarItem[]    @relation("SimilarBooksTarget")
}

model Movie {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  visitCount Int      @default(0)

  title       String
  description String?
  MovieType   MovieType       @default(LIVE_ACTION)
  posterPath  String?
  director    Person          @relation("DirectedMovies", fields: [personId], references: [id])
  release     DateTime
  duration    Int             @default(0)
  isSeries    Boolean         @default(false)
  seriesCount Int             @default(1)
  ageRating   AgeRating       @default(NR)
  genres      Genre[]
  themes      Theme[]
  franchises  FranchiseItem[]
  Cast        Cast[]
  studios     Studio[]        @relation("MovieStudios")

  ListItem       ListItem[]
  CustomListItem CustomListItem[]
  comments       Comment[]
  similarItems   SimilarItem[]    @relation("SimilarMoviesSource")
  similarToItems SimilarItem[]    @relation("SimilarMoviesTarget")
  personId       Int
}

model Studio {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String
  logoPath    String?
  country     String?

  movies Movie[] @relation("MovieStudios")
}

model Game {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  visitCount Int      @default(0)

  title       String
  description String?
  posterPath  String?
  developer   Developer       @relation(fields: [developerId], references: [id])
  duration    Int             @default(0)
  release     DateTime
  ageRating   AgeRating       @default(NR)
  genres      Genre[]
  themes      Theme[]
  Cast        Cast[]
  platforms   Platform[]
  franchises  FranchiseItem[]
  publisher   Publisher       @relation(fields: [publisherId], references: [id])

  comments       Comment[]
  ListItem       ListItem[]
  CustomListItem CustomListItem[]
  similarItems   SimilarItem[]    @relation("SimilarGamesSource")
  similarToItems SimilarItem[]    @relation("SimilarGamesTarget")
  publisherId    Int
  developerId    Int
}

model Developer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String? @default("")
  logoPath    String?

  Game Game[]
}

model Publisher {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String? @default("")
  logoPath    String?

  games Game[]
}

model Platform {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  name        String
  description String? @default("")
  logoPath    String?

  games Game[]
}

model ListItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  contentType ContentType
  status      ContentStatus
  note        String
  rating      Rating        @relation(fields: [ratingId], references: [id])
  rewathed    Int           @default(0)
  current     Int // Серия/час прохождения/страница

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book?  @relation(fields: [contentId], references: [id], map: "ListItem_Book_fkey")
  movie     Movie? @relation(fields: [contentId], references: [id], map: "ListItem_Movie_fkey")
  game      Game?  @relation(fields: [contentId], references: [id], map: "ListItem_Game_fkey")
  userId    Int
  contentId Int
  ratingId  Int
}

model FranchiseItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentType ContentType

  book        Book?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "FranchiseItem_Book_fkey")
  movie       Movie?    @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "FranchiseItem_Movie_fkey")
  game        Game?     @relation(fields: [contentId], references: [id], onDelete: Cascade, map: "FranchiseItem_Game_fkey")
  contentId   Int
  franchise   Franchise @relation(fields: [franchiseId], references: [id], onDelete: Cascade)
  franchiseId Int
}

model CustomCollection {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  visitCount Int      @default(0)

  posterPath  String?
  name        String
  description String?

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  CustomListItem CustomListItem[]
}

model CustomListItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  contentType ContentType
  status      ContentStatus

  customCollection   CustomCollection @relation(fields: [customCollectionId], references: [id], onDelete: Cascade)
  customCollectionId Int
  book               Book?            @relation(fields: [contentId], references: [id], map: "CustomListItem_Book_fkey")
  movie              Movie?           @relation(fields: [contentId], references: [id], map: "CustomListItem_Movie_fkey")
  game               Game?            @relation(fields: [contentId], references: [id], map: "CustomListItem_Game_fkey")
  contentId          Int
  User               User?            @relation(fields: [userId], references: [id])
  userId             Int?
}

model Post {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visitCount Int      @default(0)

  title String
  text  String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  media    Media[]
}

model News {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visitCount Int      @default(0)

  title String
  text  String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  media    Media[]
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  mediaPath   String
  mediaType   MediaType
  position    Int
  journalType JournalType

  post      Post? @relation(fields: [journalId], references: [id], onDelete: Cascade, map: "Post_Media")
  news      News? @relation(fields: [journalId], references: [id], onDelete: Cascade, map: "News_Media")
  journalId Int
  // Придумать как определять место в тексте новости/поста
}
